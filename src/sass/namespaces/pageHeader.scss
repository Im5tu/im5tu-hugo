@import 'global/colours';
@import 'global/defaults';

#pageHeader {
    
    background: $headerBackgroundColour;
    padding: ($defaultPadding / 2) 0;
    border-bottom: 1px solid $headerBorderColour;

    &:hover{
        background: $headerBackgroundHoverColour;
        border-bottom-color: darken($headerBorderColour, 10%);
    }

    &-wrapper {
        margin: 0 auto;

        @include mapToBreakpoint($widths) {
            width: $current;
        }
    }

    &-wrapper:after{
        content: "";
        display: table;
        clear: both;
    }

    &-logo {
        float: left;
    }

    &-nav {
        float: right;
    }

    & .pageHeader-imagery {
        width: 2em;
        height: 2em;    
    }
}

#logo{
    & .logo-path {
        fill: $logoFillColour;
        transition: color 1300ms linear;
    }

    &:hover .logo-path {
        fill: $logoFillHoverColour;
        animation: animationFrames linear 0.7s;
        animation-iteration-count: 1;
        transform-origin: 50%;

        @keyframes animationFrames{
            0% {
                transform:  rotate(0deg) ;
            }
            20% {
                transform:  rotate(-5deg) ;
            }
            40% {
                transform:  rotate(5deg) ;
            }
            60% {
                transform:  rotate(-3deg) ;
            }
            80% {
                transform:  rotate(2deg) ;
            }
            100% {
                transform:  rotate(-1deg) ;
            }
        }
    }
}











// hamburger
$hamburger-padding-x                       : 5px !default;
$hamburger-padding-y                       : 5px !default;
$hamburger-layer-width                     : 2em !default;
$hamburger-layer-height                    : 3px !default;
$hamburger-layer-spacing                   : 6px !default;
$hamburger-layer-color                     : #fff !default;
$hamburger-layer-border-radius             : 4px !default;
$hamburger-hover-opacity                   : 0.7 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter    : opacity(50%) !default;

.hamburger {
  padding: $hamburger-padding-y $hamburger-padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter;
  transition-duration: $hamburger-hover-transition-duration;
  transition-timing-function: $hamburger-hover-transition-timing-function;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;

  &:hover {
    @if $hamburger-hover-use-filter == true {
      filter: $hamburger-hover-filter;
    }
    @else {
      opacity: $hamburger-hover-opacity;
    }
  }
}

.hamburger-box {
  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: $hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
    width: $hamburger-layer-width;
    height: $hamburger-layer-height;
    background-color: $hamburger-layer-color;
    border-radius: $hamburger-layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &::after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}
.hamburger-box {
    perspective: $hamburger-layer-width * 2;
}

.hamburger-inner {
    transition: transform 0.2s cubic-bezier(0.645, 0.045, 0.355, 1),
                background-color 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);

    &::before,
    &::after {
    transition: transform 0s 0.1s cubic-bezier(0.645, 0.045, 0.355, 1);
    }
}

&.is-active {
    .hamburger-inner {
    background-color: transparent;
    transform: rotateX(-180deg);

    &::before {
        transform: translate3d(0, $hamburger-layer-height + $hamburger-layer-spacing, 0) rotate(45deg);
    }

    &::after {
        transform: translate3d(0, ($hamburger-layer-height + $hamburger-layer-spacing) * -1, 0) rotate(-45deg);
    }
    }
}